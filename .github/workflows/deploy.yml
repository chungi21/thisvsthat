name: Build and Deploy to Elastic Beanstalk

on:
  push:
    branches:
      - main  # main 브랜치에 푸시될 때 실행
  workflow_dispatch:  # 수동 실행도 가능

jobs:
  deploy:
    runs-on: ubuntu-latest # 깃허브 액션 스크립트가 작동될 OS 환경 지정

    steps:
      # 1. Java 17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'  # OpenJDK 배포판
          java-version: '17'       # Java 17 설치

      # 2. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 3. Gradle로 JAR 파일 빌드
      - name: Build JAR file
        run: |
          chmod +x ./gradlew
          ./gradlew build -x test -Dspring.profiles.active=prod

      # 4. AWS CLI 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # 5. JAR 파일을 S3에 업로드하고 Elastic Beanstalk에 배포
      - name: Deploy to Elastic Beanstalk
        run: |
          # github.run_id와 빌드 완료 시간(KST) 결합한 버전 라벨 생성
          VERSION_LABEL="v-${{ github.run_id }}-$(TZ="Asia/Seoul" date +'%Y%m%d-%H%M%S')"  # 예: v-12345-20250205-143200

          # S3에 JAR 파일 업로드
          aws s3 cp build/libs/thisvsthat-0.0.1-SNAPSHOT.jar s3://this-vs-that-bucket/deployments/this-vs-that-${VERSION_LABEL}.jar

          # Elastic Beanstalk 애플리케이션 버전 생성
          aws elasticbeanstalk create-application-version \
            --application-name "this-vs-that" \
            --version-label "${VERSION_LABEL}" \
            --source-bundle S3Bucket="this-vs-that-bucket",S3Key="deployments/this-vs-that-${VERSION_LABEL}.jar"

          # Elastic Beanstalk 환경 업데이트
          aws elasticbeanstalk update-environment \
            --environment-name "this-vs-that-eng" \
            --version-label "${VERSION_LABEL}" \
            --option-settings Namespace=aws:elasticbeanstalk:application:environment,OptionName=SPRING_PROFILES_ACTIVE,Value=prod

      # 6. Elastic Beanstalk 배포 후 대기
      - name: Wait for Elastic Beanstalk deployment
        run: |
          echo "Waiting for Elastic Beanstalk deployment to complete..."
          aws elasticbeanstalk wait environment-updated --environment-name "this-vs-that-eng"

      # 7. 배포 후 애플리케이션 헬스 체크
      - name: Check application health
        run: |
          echo "Checking application health..."
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://this-vs-that.ap-northeast-2.elasticbeanstalk.com/actuator/health)
          
          if [ "$HTTP_STATUS" -eq 200 ]; then
            echo "Application is healthy! (HTTP 200)"
          else
            echo "Application health check failed! (HTTP $HTTP_STATUS)"
            exit 1
          fi

      # 8. 빌드 완료 시간 출력
      - name: Get build completion time
        run: |
          BUILD_TIME=$(TZ="Asia/Seoul" date +"%Y-%m-%d %H:%M:%S")
          echo "Build completed at $BUILD_TIME"
        shell: bash